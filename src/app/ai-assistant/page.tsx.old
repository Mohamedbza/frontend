// src/app/ai-assistant/page.tsx
'use client';

import React, { useState, useRef, useEffect } from 'react';
import { useTheme } from '@/app/context/ThemeContext';
import { useAuth } from '@/app/context/AuthContext';
import { motion, AnimatePresence } from 'framer-motion';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import TextArea from '@/components/ui/TextArea';
import Badge from '@/components/ui/Badge';
import { apiService } from '@/lib';
import { useApiQuery } from '@/hooks/useApiQuery';
import {
  generateCandidateEmail,
  generateCompanyEmail,
  generateInterviewQuestions,
  generatePositionInterviewQuestions,
  generateJobDescription,
  generateCandidateFeedback,
  processGeneralQuery,
  setOpenAIKey
} from '@/lib/openai-service';
import { Candidate, Company } from '@/types';
import CommandMenu from '@/components/ui/CommandMenu';
import SimpleSearchMenu from '@/components/ui/SimpleSearchMenu';

// Message type
interface Message {
  id: string;
  content: string;
  sender: 'user' | 'assistant';
  timestamp: Date;
  isLoading?: boolean;
  entityReference?: {
    type: 'candidate' | 'company';
    id: string;
    name: string;
  };
}

// Command interface
interface Command {
  id: string;
  label: string;
  description: string;
  icon: React.ReactNode;
}

// AI Assistant page component
// API Key Settings Modal Component
const ApiKeySettingsModal = ({ isOpen, onClose }: { isOpen: boolean, onClose: () => void }) => {
  const { colors, theme } = useTheme();
  const [apiKey, setApiKey] = useState('');

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50">
      <div
        className="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full p-6"
        style={{ backgroundColor: theme === 'light' ? '#FFFFFF' : '#1F2937' }}
      >
        <h3 className="text-lg font-semibold mb-4" style={{ color: colors.text }}>
          OpenAI API Key Settings
        </h3>
        <p className="text-sm mb-4" style={{ color: `${colors.text}80` }}>
          Enter your OpenAI API key to enable AI features. This key will be stored in your browser's session storage and won't be sent to our servers.
        </p>
        <input
          type="password"
          value={apiKey}
          onChange={(e) => setApiKey(e.target.value)}
          placeholder="sk-..."
          className="w-full p-2 mb-4 border rounded"
          style={{
            backgroundColor: theme === 'light' ? '#F9FAFB' : '#111827',
            color: colors.text,
            borderColor: colors.border
          }}
        />
        <div className="flex justify-end gap-2">
          <button
            onClick={onClose}
            className="px-4 py-2 rounded"
            style={{ color: colors.text }}
          >
            Cancel
          </button>
          <button
            onClick={() => {
              if (apiKey.trim()) {
                setOpenAIKey(apiKey.trim());
              }
              onClose();
            }}
            className="px-4 py-2 rounded bg-blue-500 text-white"
            disabled={!apiKey.trim().startsWith('sk-')}
          >
            Save
          </button>
        </div>
      </div>
    </div>
  );
};

const AiAssistantPage = () => {
  const { colors, theme } = useTheme();
  const { user } = useAuth();
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: 'Hello! I\'m your AI assistant. I can help you with writing emails, generating interview questions, creating job descriptions, and more. To use advanced AI features, please configure your OpenAI API key in the sidebar. You can still use the assistant with mock data without an API key.',
      sender: 'assistant',
      timestamp: new Date(),
    },
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showCommandMenu, setShowCommandMenu] = useState(false);
  const [showCandidateSearch, setShowCandidateSearch] = useState(false);
  const [showCompanySearch, setShowCompanySearch] = useState(false);
  const [showApiKeySettings, setShowApiKeySettings] = useState(false);
  const [selectedEntity, setSelectedEntity] = useState<Candidate | Company | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const textAreaRef = useRef<HTMLTextAreaElement>(null);
  const [isGeneratingTemplate, setIsGeneratingTemplate] = useState(false);
  const [templateType, setTemplateType] = useState<string | null>(null);
  const [initialCommand, setInitialCommand] = useState<'search_candidate' | 'search_company' | null>(null);

  // Fetch candidates and companies with error handling and fallbacks
  const { data: candidates, error: candidatesError } = useApiQuery<Candidate[]>(
    () => apiService.candidates.getAll(),
    []
  );

  const { data: companies, error: companiesError } = useApiQuery<Company[]>(
    () => apiService.companies.getAll(),
    []
  );

  // Create fallback data if API calls fail
  const fallbackCandidates: Candidate[] = !candidates && candidatesError ? [
    {
      id: 'cand-1',
      firstName: 'John',
      lastName: 'Smith',
      email: 'john.smith@example.com',
      phone: '+1234567890',
      position: 'Software Developer',
      status: 'interview',
      createdAt: new Date(),
      updatedAt: new Date(),
      tags: ['JavaScript', 'React'],
      rating: 4,
      officeId: '1'
    },
    {
      id: 'cand-2',
      firstName: 'Sarah',
      lastName: 'Johnson',
      email: 'sarah.j@example.com',
      phone: '+1987654321',
      position: 'UX Designer',
      status: 'new',
      createdAt: new Date(),
      updatedAt: new Date(),
      tags: ['UI/UX', 'Figma'],
      rating: 3,
      officeId: '1'
    }
  ] : [];

  const fallbackCompanies: Company[] = !companies && companiesError ? [
    {
      id: 'comp-1',
      name: 'TechCorp',
      industry: 'Technology',
      contactPerson: 'James Wilson',
      contactEmail: 'james@techcorp.com',
      contactPhone: '+1122334455',
      createdAt: new Date(),
      updatedAt: new Date(),
      openPositions: 3,
      officeId: '1'
    },
    {
      id: 'comp-2',
      name: 'Marketing Solutions',
      industry: 'Marketing',
      contactPerson: 'Emma Davis',
      contactEmail: 'emma@marketingsolutions.com',
      createdAt: new Date(),
      updatedAt: new Date(),
      openPositions: 2,
      officeId: '1'
    }
  ] : [];

  // Use actual data or fallbacks
  const candidateData = candidates || fallbackCandidates;
  const companyData = companies || fallbackCompanies;

  // Scroll to bottom of messages when new ones are added
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Available commands
  const availableCommands: Command[] = [
    {
      id: 'search',
      label: 'Search',
      description: 'Find candidates or companies',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
      )
    },
    {
      id: 'email',
      label: 'Email Template',
      description: 'Generate email templates',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
        </svg>
      )
    },
    {
      id: 'interview',
      label: 'Interview Questions',
      description: 'Create interview questions',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      )
    },
    {
      id: 'job',
      label: 'Job Description',
      description: 'Create job descriptions',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
      )
    },
    {
      id: 'suggestions',
      label: 'Suggestions',
      description: 'Get personalized suggestions',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
        </svg>
      )
    }
  ];

  // Handle input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value;
    setInput(value);
  };

  // Handle selection of a candidate
  const handleSelectCandidate = (candidate: Candidate) => {
    setSelectedEntity(candidate);
    
    // Add a message to indicate selection
    const message: Message = {
      id: Date.now().toString(),
      content: `Selected candidate: ${candidate.firstName} ${candidate.lastName}`,
      sender: 'user',
      timestamp: new Date(),
      entityReference: {
        type: 'candidate',
        id: candidate.id,
        name: `${candidate.firstName} ${candidate.lastName}`,
      },
    };
    
    setMessages(prev => [...prev, message]);
    
    // If we're in the process of generating a template, continue with that
    if (templateType) {
      generateTemplateForEntity(templateType, candidate);
      setTemplateType(null);
    }
  };

  // Handle selection of a company
  const handleSelectCompany = (company: Company) => {
    setSelectedEntity(company);
    
    // Add a message to indicate selection
    const message: Message = {
      id: Date.now().toString(),
      content: `Selected company: ${company.name}`,
      sender: 'user',
      timestamp: new Date(),
      entityReference: {
        type: 'company',
        id: company.id,
        name: company.name,
      },
    };
    
    setMessages(prev => [...prev, message]);
    
    // If we're in the process of generating a template, continue with that
    if (templateType) {
      generateTemplateForEntity(templateType, company);
      setTemplateType(null);
    }
  };

  // Generate template based on the selected entity
  const generateTemplateForEntity = async (template: string, entity = selectedEntity) => {
    if (!entity) return;
    
    setIsGeneratingTemplate(true);
    
    // Add loading message
    const loadingMessage: Message = {
      id: Date.now().toString(),
      content: '',
      sender: 'assistant',
      timestamp: new Date(),
      isLoading: true,
    };
    
    setMessages(prev => [...prev, loadingMessage]);
    
    try {
      let response: string;
      
      if ('firstName' in entity) {
        // It's a candidate
        const candidate = entity as Candidate;
        
        if (template === 'email') {
          response = await generateCandidateEmail(
            candidate,
            'introduce our services',
            `Candidate Position: ${candidate.position}, Status: ${candidate.status}`
          );
        } else if (template === 'suggestions') {
          try {
            response = await processGeneralQuery(
              `Generate 3-5 suggestions for working with candidate ${candidate.firstName} ${candidate.lastName} who has position ${candidate.position} and is currently in ${candidate.status} status.`,
              `Be specific and provide actionable suggestions based on the candidate's profile.`
            );
          } catch (error) {
            console.error("Error generating suggestions:", error);
            // Fallback suggestion if API fails
            response = `Here are some suggestions for working with ${candidate.firstName} ${candidate.lastName}:

1. Schedule a follow-up interview to discuss their experience in ${candidate.position} roles
2. Ask for portfolio samples relevant to their current status (${candidate.status})
3. Connect them with team members in similar roles for a technical assessment
4. Provide feedback on their application status regularly
5. Share industry insights and company culture information to maintain engagement`;
          }
        } else {
          response = await processGeneralQuery(
            `What should I know about working with ${candidate.firstName} ${candidate.lastName}?`,
            `Candidate position: ${candidate.position}, Status: ${candidate.status}`
          );
        }
      } else {
        // It's a company
        const company = entity as Company;
        
        if (template === 'email') {
          response = await generateCompanyEmail(
            company,
            'introduce our recruitment services',
            `Company Industry: ${company.industry}, Open Positions: ${company.openPositions}`
          );
        } else if (template === 'suggestions') {
          try {
            response = await processGeneralQuery(
              `Generate 3-5 suggestions for working with ${company.name} in the ${company.industry} industry with ${company.openPositions} open positions.`,
              `Be specific and provide actionable suggestions based on the company's profile.`
            );
          } catch (error) {
            console.error("Error generating suggestions:", error);
            // Fallback suggestion if API fails
            response = `Here are some suggestions for working with ${company.name}:

1. Research their current market position in the ${company.industry} industry
2. Prepare a tailored recruitment strategy for their ${company.openPositions} open positions
3. Identify candidates with industry-specific experience in ${company.industry}
4. Schedule a meeting with ${company.contactPerson} to discuss hiring priorities
5. Create a custom talent pipeline aligned with their industry requirements`;
          }
        } else {
          response = await processGeneralQuery(
            `What should I know about working with ${company.name}?`,
            `Company Industry: ${company.industry}, Contact Person: ${company.contactPerson}`
          );
        }
      }

      // Add signature to email templates
      if (template === 'email') {
        const userFullName = user?.name || 'Recruitment Consultant';
        const userRole = user?.role === 'admin' ? 'Recruitment Manager' : 
                         user?.role === 'super_admin' ? 'Senior Recruitment Manager' : 
                         'Recruitment Consultant';
        
        response += `\n\nBest regards,\n${userFullName}\n${userRole}\nRecruitment Plus Team\ncontact@recruitmentplus.com | +1 (555) 123-4567`;
      }
      
      // Replace loading message with actual response
      setMessages(prev => {
        const updatedMessages = [...prev];
        const loadingIndex = updatedMessages.findIndex(msg => msg.isLoading);
        
        if (loadingIndex !== -1) {
          updatedMessages[loadingIndex] = {
            id: Date.now().toString(),
            content: response,
            sender: 'assistant',
            timestamp: new Date(),
          };
        }
        
        return updatedMessages;
      });
    } catch (error) {
      console.error('Error generating template:', error);
      
      // Replace loading message with error message
      setMessages(prev => {
        const updatedMessages = [...prev];
        const loadingIndex = updatedMessages.findIndex(msg => msg.isLoading);
        
        if (loadingIndex !== -1) {
          updatedMessages[loadingIndex] = {
            id: Date.now().toString(),
            content: "I'm sorry, I encountered an error generating your template. Please try again.",
            sender: 'assistant',
            timestamp: new Date(),
          };
        }
        
        return updatedMessages;
      });
    } finally {
      setIsGeneratingTemplate(false);
    }
  };

  // Generate AI response
  const generateAIResponse = async (userQuery: string, entityRef?: Message['entityReference']) => {
    try {
      let response: string;
      const lowerQuery = userQuery.toLowerCase();

      // If there's a selected entity
      if (selectedEntity) {
        if ('firstName' in selectedEntity) {
          // Candidate
          const candidate = selectedEntity;
          const fullName = `${candidate.firstName} ${candidate.lastName}`;

          if (lowerQuery.includes('email')) {
            // Generate email for candidate
            response = await generateCandidateEmail(
              candidate,
              lowerQuery.replace(/generate.*email.*for|generate.*email.*(to|about)/i, '').trim(),
              `Current position: ${candidate.position}, Status: ${candidate.status}`
            );
            
            // Add signature
            const userFullName = user?.name || 'Recruitment Consultant';
            const userRole = user?.role === 'admin' ? 'Recruitment Manager' : 
                             user?.role === 'super_admin' ? 'Senior Recruitment Manager' : 
                             'Recruitment Consultant';
            
            response += `\n\nBest regards,\n${userFullName}\n${userRole}\nRecruitment Plus Team\ncontact@recruitmentplus.com | +1 (555) 123-4567`;
          } else if (lowerQuery.includes('interview question') || lowerQuery.includes('interview preparation')) {
            // Generate interview questions based on candidate position
            response = await generatePositionInterviewQuestions(
              candidate.position,
              undefined,
              `These questions are for a candidate named ${fullName} with status: ${candidate.status}`
            );
          } else if (lowerQuery.includes('feedback')) {
            // Generate feedback for candidate
            response = await generateCandidateFeedback(
              candidate,
              lowerQuery.includes('interview') ? `After interview for ${candidate.position} position` : undefined
            );
          } else {
            // Process general query related to candidate
            response = await processGeneralQuery(userQuery, `This query is related to candidate ${fullName},
              position: ${candidate.position}, status: ${candidate.status}`);
          }
        } else {
          // Company
          const company = selectedEntity;

          if (lowerQuery.includes('email')) {
            // Generate email for company
            response = await generateCompanyEmail(
              company,
              lowerQuery.replace(/generate.*email.*for|generate.*email.*(to|about)/i, '').trim(),
              `Industry: ${company.industry}, Open positions: ${company.openPositions}`
            );
            
            // Add signature
            const userFullName = user?.name || 'Recruitment Consultant';
            const userRole = user?.role === 'admin' ? 'Recruitment Manager' : 
                             user?.role === 'super_admin' ? 'Senior Recruitment Manager' : 
                             'Recruitment Consultant';
            
            response += `\n\nBest regards,\n${userFullName}\n${userRole}\nRecruitment Plus Team\ncontact@recruitmentplus.com | +1 (555) 123-4567`;
          } else if (lowerQuery.includes('job description')) {
            // Extract position from query or use generic
            const positionMatch = userQuery.match(/job description for (a |an )?(.*?)( position)? at/i);
            const position = positionMatch ? positionMatch[2] : 'new';

            response = await generateJobDescription(
              position,
              company.name,
              company.industry
            );
          } else if (lowerQuery.includes('interview question')) {
            // Extract position from query
            const positionMatch = userQuery.match(/(interview questions|questions) for (a |an )?(.*?)( position)?( at| for)/i);
            const position = positionMatch ? positionMatch[3] : 'candidate';

            response = await generatePositionInterviewQuestions(
              position,
              company.name,
              `For a position at ${company.name} in the ${company.industry} industry`
            );
          } else {
            // Process general query related to company
            response = await processGeneralQuery(userQuery, `This query is related to company ${company.name},
              industry: ${company.industry}, contact: ${company.contactPerson}`);
          }
        }
      } else if (entityRef) {
        // Use entity reference from previous message
        const entity = entityRef.type === 'candidate'
          ? candidateData.find(c => c.id === entityRef.id)
          : companyData.find(c => c.id === entityRef.id);

        if (entity) {
          if (entityRef.type === 'candidate') {
            const candidate = entity as Candidate;
            const fullName = `${candidate.firstName} ${candidate.lastName}`;

            if (lowerQuery.includes('email')) {
              response = await generateCandidateEmail(
                candidate,
                lowerQuery.replace(/generate.*email.*for|generate.*email.*(to|about)/i, '').trim(),
                `Current position: ${candidate.position}, Status: ${candidate.status}`
              );
              
              // Add signature
              const userFullName = user?.name || 'Recruitment Consultant';
              const userRole = user?.role === 'admin' ? 'Recruitment Manager' : 
                               user?.role === 'super_admin' ? 'Senior Recruitment Manager' : 
                               'Recruitment Consultant';
              
              response += `\n\nBest regards,\n${userFullName}\n${userRole}\nRecruitment Plus Team\ncontact@recruitmentplus.com | +1 (555) 123-4567`;
            } else if (lowerQuery.includes('interview question') || lowerQuery.includes('interview preparation')) {
              response = await generatePositionInterviewQuestions(
                candidate.position,
                undefined,
                `These questions are for a candidate named ${fullName} with status: ${candidate.status}`
              );
            } else if (lowerQuery.includes('feedback')) {
              response = await generateCandidateFeedback(
                candidate,
                lowerQuery.includes('interview') ? `After interview for ${candidate.position} position` : undefined
              );
            } else {
              response = await processGeneralQuery(userQuery, `This query is related to candidate ${fullName},
                position: ${candidate.position}, status: ${candidate.status}`);
            }
          } else {
            const company = entity as Company;

            if (lowerQuery.includes('email')) {
              response = await generateCompanyEmail(
                company,
                lowerQuery.replace(/generate.*email.*for|generate.*email.*(to|about)/i, '').trim(),
                `Industry: ${company.industry}, Open positions: ${company.openPositions}`
              );
              
              // Add signature
              const userFullName = user?.name || 'Recruitment Consultant';
              const userRole = user?.role === 'admin' ? 'Recruitment Manager' : 
                               user?.role === 'super_admin' ? 'Senior Recruitment Manager' : 
                               'Recruitment Consultant';
              
              response += `\n\nBest regards,\n${userFullName}\n${userRole}\nRecruitment Plus Team\ncontact@recruitmentplus.com | +1 (555) 123-4567`;
            } else if (lowerQuery.includes('job description')) {
              const positionMatch = userQuery.match(/job description for (a |an )?(.*?)( position)? at/i);
              const position = positionMatch ? positionMatch[2] : 'new';

              response = await generateJobDescription(
                position,
                company.name,
                company.industry
              );
            } else if (lowerQuery.includes('interview question')) {
              const positionMatch = userQuery.match(/(interview questions|questions) for (a |an )?(.*?)( position)?( at| for)/i);
              const position = positionMatch ? positionMatch[3] : 'candidate';

              response = await generatePositionInterviewQuestions(
                position,
                company.name,
                `For a position at ${company.name} in the ${company.industry} industry`
              );
            } else {
              response = await processGeneralQuery(userQuery, `This query is related to company ${company.name},
                industry: ${company.industry}, contact: ${company.contactPerson}`);
            }
          }
        } else {
          // Entity not found, process general query
          response = await processGeneralQuery(userQuery);
        }
      } else {
        // No entity selected or referenced

        // Check if this is a request for job description
        if (lowerQuery.includes('job description')) {
          const positionMatch = userQuery.match(/job description for (a |an )?(.*?)( position)?/i);
          const position = positionMatch ? positionMatch[2] : 'new';

          response = await generateJobDescription(
            position,
            'your company',
            undefined,
            'Create a generic job description that can be customized later.'
          );
        }
        // Check if this is a request for interview questions
        else if (lowerQuery.includes('interview question')) {
          const positionMatch = userQuery.match(/(interview questions|questions) for (a |an )?(.*?)( position)?/i);
          const position = positionMatch ? positionMatch[3] : 'candidate';

          response = await generatePositionInterviewQuestions(
            position
          );
        }
        // Handle feedback requests
        else if (lowerQuery.includes('feedback')) {
          response = await processGeneralQuery(
            "Generate a template for candidate feedback after an interview",
            "The user wants a general feedback template that can be customized for specific candidates."
          );
        }
        // Process as general query
        else {
          response = await processGeneralQuery(userQuery);
        }
      }

      return response;
    } catch (error) {
      console.error('Error generating AI response:', error);
      return "I'm sorry, I encountered an error while processing your request. Please try again.";
    }
  };

  // Handle sending a message
  const handleSendMessage = async () => {
    if (!input.trim()) return;

    // Get the last message for context
    const lastMessage = messages[messages.length - 1];
    const entityRef = lastMessage?.entityReference;

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      content: input,
      sender: 'user',
      timestamp: new Date(),
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);
    
    // Add loading message
    const loadingMessage: Message = {
      id: (Date.now() + 1).toString(),
      content: '',
      sender: 'assistant',
      timestamp: new Date(),
      isLoading: true,
    };
    
    setMessages(prev => [...prev, loadingMessage]);
    
    // Generate AI response
    try {
      const response = await generateAIResponse(input, entityRef);
      
      // Replace loading message with actual response
      setMessages(prev => {
        const updatedMessages = [...prev];
        const loadingIndex = updatedMessages.findIndex(msg => msg.isLoading);
        
        if (loadingIndex !== -1) {
          updatedMessages[loadingIndex] = {
            id: Date.now().toString(),
            content: response,
            sender: 'assistant',
            timestamp: new Date(),
          };
        }
        
        return updatedMessages;
      });
    } catch (error) {
      console.error('Error handling message:', error);
      
      // Replace loading message with error message
      setMessages(prev => {
        const updatedMessages = [...prev];
        const loadingIndex = updatedMessages.findIndex(msg => msg.isLoading);
        
        if (loadingIndex !== -1) {
          updatedMessages[loadingIndex] = {
            id: Date.now().toString(),
            content: "I'm sorry, I encountered an error. Please try again later.",
            sender: 'assistant',
            timestamp: new Date(),
          };
        }
        
        return updatedMessages;
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Handle key events
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Format the timestamp
  const formatTime = (timestamp: Date) => {
    return timestamp.toLocaleTimeString([], {
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  // Handle command click - improved to directly generate content when an entity is selected
  const handleCommandClick = (commandId: string) => {
    // If no entity is selected for commands that need one, show an alert message
    const needsEntity = ['email', 'suggestions'].includes(commandId);

    if (needsEntity && !selectedEntity) {
      // Add an assistant message explaining the need to select an entity first
      const helpMessage: Message = {
        id: Date.now().toString(),
        content: `Please select a ${commandId === 'email' ? 'candidate or company' : 'candidate or company'} first to generate ${commandId}.`,
        sender: 'assistant',
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, helpMessage]);
      return;
    }

    switch (commandId) {
      case 'search':
        setShowCommandMenu(true);
        setInitialCommand(null);
        break;

      case 'email':
        if (selectedEntity) {
          generateTemplateForEntity('email');
        }
        break;

      case 'interview':
        if (selectedEntity && 'firstName' in selectedEntity) {
          // For candidates, generate directly based on their position
          const candidate = selectedEntity as Candidate;
          const loadingMessage: Message = {
            id: Date.now().toString(),
            content: '',
            sender: 'assistant',
            timestamp: new Date(),
            isLoading: true,
          };

          setMessages(prev => [...prev, loadingMessage]);

          generatePositionInterviewQuestions(
            candidate.position || 'candidate',
            undefined,
            `These questions are for ${candidate.firstName} ${candidate.lastName}`
          ).then(response => {
            setMessages(prev => {
              const updatedMessages = [...prev];
              const loadingIndex = updatedMessages.findIndex(msg => msg.isLoading);

              if (loadingIndex !== -1) {
                updatedMessages[loadingIndex] = {
                  id: Date.now().toString(),
                  content: response,
                  sender: 'assistant',
                  timestamp: new Date(),
                  entityReference: {
                    type: 'candidate',
                    id: candidate.id,
                    name: `${candidate.firstName} ${candidate.lastName}`,
                  },
                };
              }

              return updatedMessages;
            });
          }).catch(error => {
            console.error('Error generating interview questions:', error);
            setMessages(prev => {
              const updatedMessages = [...prev];
              const loadingIndex = updatedMessages.findIndex(msg => msg.isLoading);

              if (loadingIndex !== -1) {
                updatedMessages[loadingIndex] = {
                  id: Date.now().toString(),
                  content: "Sorry, I couldn't generate interview questions. Please try again later.",
                  sender: 'assistant',
                  timestamp: new Date(),
                };
              }

              return updatedMessages;
            });
          });
        } else if (selectedEntity) {
          // For companies
          const company = selectedEntity as Company;
          const loadingMessage: Message = {
            id: Date.now().toString(),
            content: '',
            sender: 'assistant',
            timestamp: new Date(),
            isLoading: true,
          };

          setMessages(prev => [...prev, loadingMessage]);

          generatePositionInterviewQuestions(
            "candidate", // Default position
            company.name,
            `These questions are for candidates applying to ${company.name}`
          ).then(response => {
            setMessages(prev => {
              const updatedMessages = [...prev];
              const loadingIndex = updatedMessages.findIndex(msg => msg.isLoading);

              if (loadingIndex !== -1) {
                updatedMessages[loadingIndex] = {
                  id: Date.now().toString(),
                  content: response,
                  sender: 'assistant',
                  timestamp: new Date(),
                  entityReference: {
                    type: 'company',
                    id: company.id,
                    name: company.name,
                  },
                };
              }

              return updatedMessages;
            });
          }).catch(error => {
            console.error('Error generating interview questions:', error);
            setMessages(prev => {
              const updatedMessages = [...prev];
              const loadingIndex = updatedMessages.findIndex(msg => msg.isLoading);

              if (loadingIndex !== -1) {
                updatedMessages[loadingIndex] = {
                  id: Date.now().toString(),
                  content: "Sorry, I couldn't generate interview questions. Please try again later.",
                  sender: 'assistant',
                  timestamp: new Date(),
                };
              }

              return updatedMessages;
            });
          });
        } else {
          // No entity selected - ask user to select one
          const helpMessage: Message = {
            id: Date.now().toString(),
            content: `Please select a candidate or company first to generate interview questions.`,
            sender: 'assistant',
            timestamp: new Date(),
          };

          setMessages(prev => [...prev, helpMessage]);
        }
        break;

      case 'job':
        if (selectedEntity && !('firstName' in selectedEntity)) {
          // For companies, generate directly
          const company = selectedEntity as Company;
          const loadingMessage: Message = {
            id: Date.now().toString(),
            content: '',
            sender: 'assistant',
            timestamp: new Date(),
            isLoading: true,
          };

          setMessages(prev => [...prev, loadingMessage]);

          generateJobDescription(
            "position", // Default position
            company.name,
            company.industry
          ).then(response => {
            setMessages(prev => {
              const updatedMessages = [...prev];
              const loadingIndex = updatedMessages.findIndex(msg => msg.isLoading);

              if (loadingIndex !== -1) {
                updatedMessages[loadingIndex] = {
                  id: Date.now().toString(),
                  content: response,
                  sender: 'assistant',
                  timestamp: new Date(),
                  entityReference: {
                    type: 'company',
                    id: company.id,
                    name: company.name,
                  },
                };
              }

              return updatedMessages;
            });
          }).catch(error => {
            console.error('Error generating job description:', error);
            setMessages(prev => {
              const updatedMessages = [...prev];
              const loadingIndex = updatedMessages.findIndex(msg => msg.isLoading);

              if (loadingIndex !== -1) {
                updatedMessages[loadingIndex] = {
                  id: Date.now().toString(),
                  content: "Sorry, I couldn't generate a job description. Please try again later.",
                  sender: 'assistant',
                  timestamp: new Date(),
                };
              }

              return updatedMessages;
            });
          });
        } else {
          // For candidates or no entity, show a message
          const helpMessage: Message = {
            id: Date.now().toString(),
            content: `Please select a company to generate a job description.`,
            sender: 'assistant',
            timestamp: new Date(),
          };

          setMessages(prev => [...prev, helpMessage]);
        }
        break;

      case 'suggestions':
        if (selectedEntity) {
          generateTemplateForEntity('suggestions');
        }
        break;

      default:
        break;
    }
  };

  // Debug function to track when UI components are being shown
  const debugShowState = () => {
    console.log("Command menu state:", {
      showCommandMenu,
      initialCommand,
      templateType,
      selectedEntity: selectedEntity ?
        ('firstName' in selectedEntity ?
          `Candidate: ${selectedEntity.firstName} ${selectedEntity.lastName}` :
          `Company: ${selectedEntity.name}`)
        : 'None'
    });
  };

  // Entity info component
  const EntityInfo = ({ entity }: { entity: Candidate | Company }) => {
    const isCandidate = 'firstName' in entity;
    
    return (
      <div 
        className="flex items-center gap-3 px-4 py-2 rounded-full text-sm"
        style={{ 
          backgroundColor: isCandidate ? `${colors.primary}15` : `${colors.secondary}15`,
          color: colors.text
        }}
      >
        <div 
          className={`w-7 h-7 ${isCandidate ? 'rounded-full' : 'rounded-md'} flex items-center justify-center text-white font-medium text-sm`}
          style={{ 
            backgroundColor: isCandidate ? colors.primary : colors.secondary
          }}
        >
          {isCandidate
            ? `${(entity as Candidate).firstName?.charAt(0) || ''}${(entity as Candidate).lastName?.charAt(0) || ''}`
            : ((entity as Company).name?.charAt(0) || 'C')}
        </div>
        <span className="font-medium">
          {isCandidate
            ? `${(entity as Candidate).firstName || 'Unknown'} ${(entity as Candidate).lastName || 'Candidate'}`
            : ((entity as Company).name || 'Unknown Company')}
        </span>
        {isCandidate && (entity as Candidate).status && (
          <Badge
            variant={
              (entity as Candidate).status === 'hired' ? 'success' :
              (entity as Candidate).status === 'rejected' ? 'danger' :
              (entity as Candidate).status === 'offer' ? 'warning' :
              'primary'
            }
            className="text-xs py-0.5 px-2"
          >
            {(entity as Candidate).status}
          </Badge>
        )}
        <button 
          className="ml-auto text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 transition-colors"
          onClick={() => setSelectedEntity(null)}
          title="Clear selection"
        >
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    );
  };

  return (
    <div className="h-full flex flex-col">
      {/* API Key Settings Modal */}
      <ApiKeySettingsModal
        isOpen={showApiKeySettings}
        onClose={() => setShowApiKeySettings(false)}
      />

      {/* Command Menu */}
      <CommandMenu
        isOpen={showCommandMenu}
        onClose={() => {
          console.log("Closing command menu", { templateType, hasSelectedEntity: !!selectedEntity });
          setShowCommandMenu(false);
          // After closing the command menu, check if a template type is set to generate content
          if (templateType && selectedEntity) {
            // After a short delay, generate the template
            setTimeout(() => {
              generateTemplateForEntity(templateType, selectedEntity);
              setTemplateType(null);
            }, 500);
          }
        }}
        onSelectCandidate={handleSelectCandidate}
        onSelectCompany={handleSelectCompany}
        candidates={candidateData}
        companies={companyData}
        initialCommand={initialCommand}
        selectedEntity={selectedEntity}
      />

      {/* Simple Search Menus */}
      <SimpleSearchMenu
        isOpen={showCandidateSearch}
        type="candidates"
        items={candidateData}
        onSelect={(candidate) => {
          setShowCandidateSearch(false);
          handleSelectCandidate(candidate as Candidate);
        }}
        onClose={() => setShowCandidateSearch(false)}
      />

      <SimpleSearchMenu
        isOpen={showCompanySearch}
        type="companies"
        items={companyData}
        onSelect={(company) => {
          setShowCompanySearch(false);
          handleSelectCompany(company as Company);
        }}
        onClose={() => setShowCompanySearch(false)}
      />

      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold" style={{ color: colors.text }}>
          AI Assistant
        </h1>
        {selectedEntity && (
          <EntityInfo entity={selectedEntity} />
        )}
      </div>

      <div className="flex flex-1 gap-6 h-[calc(100vh-12rem)]">
        {/* Main chat area */}
        <div className="flex-1 flex flex-col h-full">
          <div 
            className="flex-1 rounded-2xl overflow-hidden flex flex-col relative"
            style={{ 
              backgroundColor: theme === 'light' ? '#F9FAFB' : '#111827',
              boxShadow: theme === 'light' 
                ? '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'
                : '0 4px 6px -1px rgba(0, 0, 0, 0.4), 0 2px 4px -1px rgba(0, 0, 0, 0.2)'
            }}
          >
            {/* Command bar */}
            <div
              className="p-2 flex flex-wrap gap-1 overflow-x-auto"
              style={{
                backgroundColor: theme === 'light' ? '#F3F4F6' : '#1F2937',
                borderBottom: `1px solid ${theme === 'light' ? '#E5E7EB' : '#374151'}`
              }}
            >
              {/* Entity Selection Section */}
              <div className="flex items-center gap-1 pr-2 mr-1" style={{ borderRight: `1px solid ${theme === 'light' ? '#E5E7EB' : '#374151'}` }}>
                <button
                  className="flex items-center gap-2 px-3 py-1.5 rounded-full text-sm font-medium transition-all"
                  style={{
                    backgroundColor: theme === 'light' ? '#FFFFFF' : '#111827',
                    color: colors.primary,
                    border: theme === 'light' ? '1px solid #E5E7EB' : '1px solid #374151',
                    boxShadow: '0 1px 2px rgba(0, 0, 0, 0.05)'
                  }}
                  onClick={() => setShowCandidateSearch(true)}
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  <span>Candidate</span>
                </button>

                <button
                  className="flex items-center gap-2 px-3 py-1.5 rounded-full text-sm font-medium transition-all"
                  style={{
                    backgroundColor: theme === 'light' ? '#FFFFFF' : '#111827',
                    color: colors.secondary,
                    border: theme === 'light' ? '1px solid #E5E7EB' : '1px solid #374151',
                    boxShadow: '0 1px 2px rgba(0, 0, 0, 0.05)'
                  }}
                  onClick={() => setShowCompanySearch(true)}
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                  </svg>
                  <span>Company</span>
                </button>
              </div>

              {/* Action buttons - only enabled when an entity is selected */}
              <div className="flex items-center gap-1 flex-wrap">
                {selectedEntity && availableCommands.map(command => (
                  <button
                    key={command.id}
                    className={`flex items-center gap-2 px-3 py-1.5 rounded-full text-sm font-medium transition-all ${!selectedEntity && command.id !== 'search' ? 'opacity-60 cursor-not-allowed' : ''}`}
                    style={{
                      backgroundColor: theme === 'light' ? '#FFFFFF' : '#111827',
                      color: colors.primary,
                      border: theme === 'light' ? '1px solid #E5E7EB' : '1px solid #374151',
                      boxShadow: '0 1px 2px rgba(0, 0, 0, 0.05)'
                    }}
                    onClick={() => handleCommandClick(command.id)}
                    disabled={!selectedEntity && command.id !== 'search'}
                  >
                    <span>{command.icon}</span>
                    <span>{command.label}</span>
                  </button>
                ))}

                {!selectedEntity && (
                  <div className="ml-2 text-sm py-1.5 text-gray-500 italic">
                    Select a candidate or company to enable actions
                  </div>
                )}
              </div>
            </div>
            
            {/* Messages */}
            <div
              className="flex-1 overflow-y-auto px-4 py-3 flex flex-col gap-4"
              style={{
                background: theme === 'light'
                  ? 'linear-gradient(180deg, #F9FAFB 0%, #F3F4F6 100%)'
                  : 'linear-gradient(180deg, #111827 0%, #0F172A 100%)'
              }}
            >
              {messages.map((message, index) => (
                <motion.div
                  key={message.id}
                  className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'} max-w-[85%] ${message.sender === 'user' ? 'ml-auto' : 'mr-auto'}`}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  {/* Entity reference indicator */}
                  {message.entityReference && message.sender === 'assistant' && (
                    <div className="flex items-center mr-2 mt-2">
                      <div
                        className={`w-7 h-7 ${message.entityReference.type === 'candidate' ? 'rounded-full' : 'rounded-md'} flex items-center justify-center text-white font-medium text-xs`}
                        style={{
                          backgroundColor: message.entityReference.type === 'candidate' ? colors.primary : colors.secondary,
                          opacity: 0.7
                        }}
                        title={`Generated for ${message.entityReference.name}`}
                      >
                        {message.entityReference.type === 'candidate'
                          ? message.entityReference.name.split(' ').map(n => n.charAt(0)).join('')
                          : message.entityReference.name.charAt(0)}
                      </div>
                    </div>
                  )}

                  <div
                    className={`rounded-2xl px-4 py-3 ${
                      message.sender === 'user'
                        ? 'bg-blue-500 text-white'
                        : theme === 'light' ? 'bg-white' : 'bg-gray-800'
                    } ${index === messages.length - 1 ? 'border-2 border-opacity-50' : ''}`}
                    style={
                      message.sender === 'user'
                        ? index === messages.length - 1 ? { borderColor: 'rgba(59, 130, 246, 0.5)' } : {}
                        : {
                            color: colors.text,
                            boxShadow: theme === 'light'
                              ? '0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06)'
                              : '0 1px 3px rgba(0, 0, 0, 0.3), 0 1px 2px rgba(0, 0, 0, 0.2)',
                            borderColor: index === messages.length - 1 ?
                              theme === 'light' ? 'rgba(96, 165, 250, 0.5)' : 'rgba(59, 130, 246, 0.5)' : 'transparent'
                          }
                    }
                  >
                    {message.isLoading ? (
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '0ms' }}></div>
                        <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '150ms' }}></div>
                        <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '300ms' }}></div>
                      </div>
                    ) : (
                      <>
                        {/* Message Content */}
                        <div className="whitespace-pre-line text-sm">{message.content}</div>

                        {/* Message Footer */}
                        <div className="flex items-center justify-between mt-2 pt-1 border-t"
                             style={{ borderColor: message.sender === 'user' ? 'rgba(255, 255, 255, 0.2)' : `${colors.border}60` }}>
                          {/* Entity reference as tag for user clarity */}
                          {message.entityReference && (
                            <div
                              className="text-xs px-2 py-0.5 rounded-full"
                              style={{
                                backgroundColor: message.entityReference.type === 'candidate' ?
                                  'rgba(59, 130, 246, 0.2)' : 'rgba(239, 68, 68, 0.2)',
                                color: message.entityReference.type === 'candidate' ?
                                  message.sender === 'user' ? 'white' : colors.primary :
                                  message.sender === 'user' ? 'white' : colors.secondary
                              }}
                            >
                              {message.entityReference.name}
                            </div>
                          )}

                          {/* Timestamp */}
                          <div
                            className={`text-xs ${
                              message.sender === 'user' ? 'text-blue-100' : ''
                            } ${message.entityReference ? 'ml-auto' : ''}`}
                            style={{ color: message.sender === 'user' ? 'rgba(255, 255, 255, 0.7)' : `${colors.text}60` }}
                          >
                            {formatTime(message.timestamp)}
                          </div>
                        </div>
                      </>
                    )}
                  </div>
                </motion.div>
              ))}
              <div ref={messagesEndRef} />
            </div>
            
            {/* Input area with advanced features */}
            <div
              className="p-3 bg-white dark:bg-gray-800 border-t"
              style={{ borderColor: theme === 'light' ? '#E5E7EB' : '#374151' }}
            >
              {/* Entity reference indicator - show which entity we're working with */}
              {selectedEntity && (
                <div className="mb-2 px-2 py-1 text-xs flex items-center"
                     style={{
                       backgroundColor: 'firstName' in selectedEntity ? `${colors.primary}15` : `${colors.secondary}15`,
                       color: colors.text,
                       borderRadius: '0.5rem',
                     }}>
                  <span className="font-medium mr-2">Working with:</span>
                  <span className="font-bold">{
                    'firstName' in selectedEntity ?
                      `${selectedEntity.firstName} ${selectedEntity.lastName}` :
                      selectedEntity.name
                  }</span>
                  <button
                    className="ml-auto text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 transition-colors"
                    onClick={() => setSelectedEntity(null)}
                    title="Clear selection"
                  >
                    <svg className="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              )}

              <div className="flex items-end gap-2">
                <div className="flex-1 relative">
                  <TextArea
                    ref={textAreaRef}
                    value={input}
                    onChange={handleInputChange}
                    onKeyDown={handleKeyDown}
                    placeholder={selectedEntity ?
                      `Ask about ${('firstName' in selectedEntity) ?
                        selectedEntity.firstName + ' ' + selectedEntity.lastName :
                        selectedEntity.name}...` :
                      "Type a message or select a candidate/company first..."}
                    rows={1}
                    fullWidth
                    maxRows={6}
                    className="resize-none rounded-xl pr-24" // More space for buttons
                    disabled={isLoading || isGeneratingTemplate}
                  />

                  {/* Command menu and options buttons */}
                  <div className="absolute right-2 bottom-2 flex items-center space-x-1">
                    {/* Command options menu (folder icon) */}
                    <div className="relative">
                      <button
                        className="p-1.5 rounded-md text-gray-400 hover:text-gray-600 hover:bg-gray-100 dark:hover:text-gray-200 dark:hover:bg-gray-700 transition-colors"
                        onClick={() => {
                          if (selectedEntity) {
                            // Show a popup with options based on the selected entity
                            setShowCommandMenu(true);
                          } else {
                            // Tell the user they need to select an entity first
                            const helpMessage: Message = {
                              id: Date.now().toString(),
                              content: "Please select a candidate or company first to see available actions.",
                              sender: 'assistant',
                              timestamp: new Date(),
                            };

                            setMessages(prev => [...prev, helpMessage]);
                          }
                        }}
                        title={selectedEntity ? "Show options" : "Select a candidate or company first"}
                        type="button"
                      >
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z" />
                        </svg>
                      </button>
                    </div>

                    {/* Entity search button */}
                    <button
                      className="p-1.5 rounded-md text-gray-400 hover:text-gray-600 hover:bg-gray-100 dark:hover:text-gray-200 dark:hover:bg-gray-700 transition-colors"
                      onClick={() => {
                        // Toggle between candidate and company search
                        if ('firstName' in (selectedEntity || {})) {
                          setShowCompanySearch(true); // Switch to company search
                        } else {
                          setShowCandidateSearch(true); // Default to candidate search
                        }
                      }}
                      title="Search entities"
                      type="button"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                      </svg>
                    </button>
                  </div>
                </div>

                {/* Send button */}
                <button
                  onClick={handleSendMessage}
                  disabled={isLoading || isGeneratingTemplate || !input.trim()}
                  className={`p-2 rounded-full text-white transition-colors
                    ${input.trim() ? 'bg-blue-500 hover:bg-blue-600' : 'bg-blue-300 cursor-not-allowed'}`}
                  title="Send message"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
        
        {/* Sidebar */}
        <div 
          className="w-80 overflow-y-auto rounded-2xl p-5 flex flex-col gap-6"
          style={{ 
            backgroundColor: theme === 'light' ? '#FFFFFF' : '#1F2937',
            boxShadow: theme === 'light' 
              ? '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'
              : '0 4px 6px -1px rgba(0, 0, 0, 0.4), 0 2px 4px -1px rgba(0, 0, 0, 0.2)'
          }}
        >
          <div>
            <h3 
              className="text-base font-semibold mb-3"
              style={{ color: colors.text }}
            >
              Quick Actions
            </h3>
            <div className="flex flex-col gap-2">
              <button
                className="flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium w-full text-left transition-all"
                style={{
                  backgroundColor: `${colors.primary}15`,
                  color: colors.primary,
                  border: `1px solid ${colors.primary}30`
                }}
                onClick={() => {
                  setShowCandidateSearch(true);
                }}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                <span>Search Candidates</span>
              </button>

              <button
                className="flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium w-full text-left transition-all mt-2"
                style={{
                  backgroundColor: `${colors.secondary}15`,
                  color: colors.secondary,
                  border: `1px solid ${colors.secondary}30`
                }}
                onClick={() => {
                  setShowCompanySearch(true);
                }}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                </svg>
                <span>Search Companies</span>
              </button>
              <button
                className="flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium w-full text-left transition-all"
                style={{ 
                  backgroundColor: theme === 'light' ? '#F3F4F6' : '#111827',
                  color: selectedEntity ? colors.text : theme === 'light' ? '#9CA3AF' : '#6B7280',
                  border: theme === 'light' ? '1px solid #E5E7EB' : '1px solid #374151'
                }}
                onClick={() => {
                  if (selectedEntity) {
                    generateTemplateForEntity('email');
                  } else {
                    setShowCommandMenu(true);
                    setTemplateType('email');
                  }
                }}
                disabled={!selectedEntity}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" style={{ color: selectedEntity ? colors.primary : theme === 'light' ? '#9CA3AF' : '#6B7280' }}>
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
                <span>Generate Email</span>
              </button>
              <button
                className="flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium w-full text-left transition-all"
                style={{ 
                  backgroundColor: theme === 'light' ? '#F3F4F6' : '#111827',
                  color: selectedEntity ? colors.text : theme === 'light' ? '#9CA3AF' : '#6B7280',
                  border: theme === 'light' ? '1px solid #E5E7EB' : '1px solid #374151'
                }}
                onClick={() => {
                  if (selectedEntity) {
                    generateTemplateForEntity('suggestions');
                  } else {
                    setShowCommandMenu(true);
                    setTemplateType('suggestions');
                  }
                }}
                disabled={!selectedEntity}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" style={{ color: selectedEntity ? colors.primary : theme === 'light' ? '#9CA3AF' : '#6B7280' }}>
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                </svg>
                <span>Get Suggestions</span>
              </button>
            </div>
          </div>
          
          <div>
            <h3 
              className="text-base font-semibold mb-3"
              style={{ color: colors.text }}
            >
              Example Prompts
            </h3>
            <div className="flex flex-col gap-2 text-sm">
              <div 
                className="p-2 rounded-lg cursor-pointer"
                style={{ 
                  backgroundColor: theme === 'light' ? '#F3F4F6' : '#111827',
                  color: colors.text,
                  border: theme === 'light' ? '1px solid #E5E7EB' : '1px solid #374151'
                }}
                onClick={() => {
                  setInput("Write an email to introduce our recruitment services");
                  textAreaRef.current?.focus();
                }}
              >
                Write an email to introduce our recruitment services
              </div>
              <div 
                className="p-2 rounded-lg cursor-pointer"
                style={{ 
                  backgroundColor: theme === 'light' ? '#F3F4F6' : '#111827',
                  color: colors.text,
                  border: theme === 'light' ? '1px solid #E5E7EB' : '1px solid #374151'
                }}
                onClick={() => {
                  setInput("Generate interview questions for a software developer");
                  textAreaRef.current?.focus();
                }}
              >
                Generate interview questions for a software developer
              </div>
              <div 
                className="p-2 rounded-lg cursor-pointer"
                style={{ 
                  backgroundColor: theme === 'light' ? '#F3F4F6' : '#111827',
                  color: colors.text,
                  border: theme === 'light' ? '1px solid #E5E7EB' : '1px solid #374151'
                }}
                onClick={() => {
                  setInput("Create a job description for a marketing manager");
                  textAreaRef.current?.focus();
                }}
              >
                Create a job description for a marketing manager
              </div>
              <div 
                className="p-2 rounded-lg cursor-pointer"
                style={{ 
                  backgroundColor: theme === 'light' ? '#F3F4F6' : '#111827',
                  color: colors.text,
                  border: theme === 'light' ? '1px solid #E5E7EB' : '1px solid #374151'
                }}
                onClick={() => {
                  setInput("Give me 5 tips for recruiting top technical talent");
                  textAreaRef.current?.focus();
                }}
              >
                Give me 5 tips for recruiting top technical talent
              </div>
            </div>
          </div>
          
          <div>
            <h3
              className="text-base font-semibold mb-3"
              style={{ color: colors.text }}
            >
              Tips
            </h3>
            <div
              className="text-sm rounded-lg p-3 mb-3"
              style={{
                backgroundColor: `${colors.primary}15`,
                color: colors.text,
                border: `1px solid ${colors.primary}30`
              }}
            >
              <p className="mb-2">
                <span className="font-semibold" style={{ color: colors.primary }}>1.</span> Select a candidate or company first to get personalized content
              </p>
              <p className="mb-2">
                <span className="font-semibold" style={{ color: colors.primary }}>2.</span> Use the command bar to quickly access common actions
              </p>
              <p>
                <span className="font-semibold" style={{ color: colors.primary }}>3.</span> Try asking for specific types of emails or content
              </p>
            </div>

            <button
              className="flex items-center gap-2 p-3 rounded-lg text-sm font-medium w-full transition-all"
              style={{
                backgroundColor: `${colors.secondary}15`,
                color: colors.secondary,
                border: `1px solid ${colors.secondary}30`
              }}
              onClick={() => setShowApiKeySettings(true)}
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
              </svg>
              <span>Configure OpenAI API Key</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AiAssistantPage;